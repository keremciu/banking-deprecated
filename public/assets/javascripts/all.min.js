/**
 *
 * Project: ALJ Homebanking
 * Components Javascript Version: 0.0.1
 * Company: Asseco See
 * Kerem Sevencan <kerem.sevencan@asseco-see.com.tr>
 * Date <24 June 2015>
 * 
**/

$(document).ready(function() {

// -----------------------------------------------------------------

	//
	// Find device orientation
	//

	// // Find matches
	// var mql = window.matchMedia("(orientation: portrait)");

	// // If there are matches, we're in portrait
	// if(mql.matches) {  
	// 	// Portrait orientation
	// } else {  
	// 	// Landscape orientation
	// }

	// // Add a media query change listener
	// mql.addListener(function(m) {
	// 	if(m.matches) {
	// 		// Changed to portrait
	// 	}
	// 	else {
	// 		// Changed to landscape
	// 	}
	// });

// -----------------------------------------------------------------

	//
	// Responsive Page Actions
	//
	var x = $('<div class="mask"></div>');
	x.on('click', function(event) {
		$("body").removeClass("pushit");
		$(".nav-mobile-button").removeClass("active");
		$(".mask").remove();
	});

	$('.nav-mobile-button').on('click', function(event) {
		if (!$(this).hasClass("active")) {
			$("body").addClass("pushit");
			$(this).addClass("active");
			$("body").append(x);
		} else {
			$("body").removeClass("pushit");
			$(".nav-mobile-button").removeClass("active");
			$(".mask").remove();
		}
	});

	// Main menu - hover event trigger click function
    $('[data-toggle="dropdown"]').bootstrapDropdownHover({
		'ClickBehavior': 'default'
	});

    // submenu item
	$('.dropdown-submenu a').on('click', function(e) {
		//e.preventDefault();
		//$(this).parent().find(".dropdown-menu").show();
		$(this).parents(".dropdown.open").removeClass("open");
		$(this).parent().parent().show();
		//.children(".dropdown-menu").show();
	});

// -----------------------------------------------------------------

	//
	// Login Page Simulation in Front-end Case -- AJAX Examples
	//

	// Ajax call with Form Object
	// $('.form-action').on('submit', function (e) {

 //    	var sender = $(this).find(".btn-sender");
 //      	sender.button('loading');
 //      	e.preventDefault();

 //      	$.ajax({
	//         type: 'POST',
	//         // url router in gulpfile.js/tasks/express_server.js
	//         // you can find action attribute in login html.
	//         url: $(this).attr('action'),
	//         data: $(this).serialize(),
	//         success: function (data) {
	//         	// get request
	//         	console.log(data);
	//           	// reset state
	//           	setTimeout(function () {
	// 	            sender.button('reset');
	// 	            $("."+data).removeClass('hide').hide().slideDown("fast", function(){
	// 	            	$("#sifre").focus();
	// 	            });
	// 	        }, 1000);
	//         }
	//     });
 //    });

	// // Ajax Call with Form Submitter Button
	// $('.form-sender').on('click', function (e) {
	// 	var form = $(this).parents("form");
	// 	var sender = $(this);
	// 	sender.button('loading');
	// 	e.preventDefault();

	// 	$.ajax({
	//         type: 'POST',
	//         // url router in gulpfile.js/tasks/express_server.js
	//         // you can find action attribute in login html.
	//         url: form.attr('action'),
	//         data: form.serialize(),
	//         success: function (data) {
	//         	// get request
	//         	console.log(data);
	//           	// reset state
	//           	// timeout only created for simulation not to production.
	//           	setTimeout(function () {
	// 	            sender.button('reset');
	// 	            $("."+data).removeClass('hide').hide().slideDown("fast", function(){
	// 	            	var timer = new Tock({
	// 					  countdown: true,
	// 					  callback: function () {
	// 						var current_time = timer.msToTime(timer.lap());
	// 						$('#countdownitem').html(current_time);
	// 					  },
	// 					  complete: function() {						  	
	// 					  }
	// 					});
	// 				    timer.start("01:20");
	// 	            	$("#sifre").focus();
	// 	            });
	// 	        }, 1000)
	//         }
	//     });
	// });

});
/*
 *  Bootstrap Dropdown Hover - v1.0.4
 *  Open dropdown menus on mouse hover, the proper way.
 *  http://www.virtuosoft.eu/code/bootstrap-dropdown-hover/
 *
 *  Made by István Ujj-Mészáros
 *  Under Apache License v2.0 License
 */
!function(a,b,c,d){function e(b,c){this.element=a(b),this.settings=a.extend({},j,c),this._defaults=j,this._name=i,this.init()}function f(b){a("body").one("touchstart.dropdownhover",function(){l=!0}),a("body").one("mouseenter.dropdownhover",function(){l||(m=!0)}),a(".dropdown-toggle, .dropdown-menu",b.element.parent()).on("mouseenter.dropdownhover",function(){m&&!a(this).is(":hover")&&(m=!1),m&&(clearTimeout(h),b.element.parent().hasClass("open")||(k=!1,b.element.dropdown("toggle")))}),a(".dropdown-toggle, .dropdown-menu",b.element.parent()).on("mouseleave.dropdownhover",function(){m&&(k||(h=setTimeout(function(){b.element.parent().hasClass("open")&&b.element.dropdown("toggle")},b.settings.hideTimeout)))}),b.element.on("click.dropdownhover",function(a){if(m)switch(b.settings.clickBehavior){case"default":return;case"disable":a.preventDefault(),a.stopImmediatePropagation();break;case"sticky":return void(k?k=!1:(k=!0,b.element.parent().hasClass("open")&&(a.stopImmediatePropagation(),a.preventDefault())))}})}function g(b){a(".dropdown-toggle, .dropdown-menu",b.element.parent()).off(".dropdownhover"),a(".dropdown-toggle, .dropdown-menu",b.element.parent()).off(".dropdown"),b.element.off(".dropdownhover"),a("body").off(".dropdownhover")}var h,i="bootstrapDropdownHover",j={clickBehavior:"sticky",hideTimeout:200},k=!1,l=!1,m=!1;e.prototype={init:function(){return this.setClickBehavior(this.settings.clickBehavior),this.setHideTimeout(this.settings.hideTimeout),f(this),this.element},setClickBehavior:function(a){return this.settings.clickBehavior=a,this.element},setHideTimeout:function(a){return this.settings.hideTimeout=a,this.element},destroy:function(){return clearTimeout(h),g(this),this.element.data("plugin_"+i,null),this.element}},a.fn[i]=function(b){var f=arguments;if(b===d||"object"==typeof b)return a.contains(c,a(this)[0])||a('[data-toggle="dropdown"]').each(function(c,d){a(d).bootstrapDropdownHover(b)}),this.each(function(){a(this).hasClass("dropdown-toggle")&&"dropdown"===a(this).data("toggle")?a.data(this,"plugin_"+i)||a.data(this,"plugin_"+i,new e(this,b)):a('[data-toggle="dropdown"]',this).each(function(c,d){a(d).bootstrapDropdownHover(b)})});if("string"==typeof b&&"_"!==b[0]&&"init"!==b){var g;return this.each(function(){var c=a.data(this,"plugin_"+i);c instanceof e&&"function"==typeof c[b]&&(g=c[b].apply(c,Array.prototype.slice.call(f,1)))}),g!==d?g:this}}}(jQuery,window,document);

/* radio js */

/* =============================================================
 * flatui-radio v0.0.3
 * ============================================================ */

!function ($) {

 /* RADIO PUBLIC CLASS DEFINITION
  * ============================== */

  var Radio = function (element, options) {
    this.init(element, options);
  }

  Radio.prototype = {
  
    constructor: Radio
    
  , init: function (element, options) {      
      var $el = this.$element = $(element)
      
      this.options = $.extend({}, $.fn.radio.defaults, options);      
      $el.before(this.options.template);    
      this.setState();
    }   
    
  , setState: function () {    
      var $el = this.$element
        , $parent = $el.closest('.radio');
        
        $el.prop('disabled') && $parent.addClass('disabled');   
        $el.prop('checked') && $parent.addClass('checked');
    } 
    
  , toggle: function () {    
      var d = 'disabled'
        , ch = 'checked'
        , $el = this.$element
        , checked = $el.prop(ch)
        , $parent = $el.closest('.radio')      
        , $parentWrap = $el.closest('form').length ? $el.closest('form') : $el.closest('body')
        , $elemGroup = $parentWrap.find(':radio[name="' + $el.attr('name') + '"]')
        , e = $.Event('toggle')
        
        $elemGroup.not($el).each(function () {
          var $el = $(this)
            , $parent = $(this).closest('.radio');
            
            if ($el.prop(d) == false) {
              $parent.removeClass(ch) && $el.removeAttr(ch).trigger('change');
            } 
        });
      
        if ($el.prop(d) == false) {
          if (checked == false) $parent.addClass(ch) && $el.prop(ch, true);
          $el.trigger(e);
          
          if (checked !== $el.prop(ch)) {
            $el.trigger('change'); 
          }
        }               
    } 
     
  , setCheck: function (option) {    
      var ch = 'checked'
        , $el = this.$element
        , $parent = $el.closest('.radio')
        , checkAction = option == 'check' ? true : false
        , checked = $el.prop(ch)
        , $parentWrap = $el.closest('form').length ? $el.closest('form') : $el.closest('body')
        , $elemGroup = $parentWrap.find(':radio[name="' + $el['attr']('name') + '"]')
        , e = $.Event(option)
        
      $elemGroup.not($el).each(function () {
        var $el = $(this)
          , $parent = $(this).closest('.radio');
          
          $parent.removeClass(ch) && $el.removeAttr(ch);
      });
            
      $parent[checkAction ? 'addClass' : 'removeClass'](ch) && checkAction ? $el.prop(ch, ch) : $el.removeAttr(ch);
      $el.trigger(e);  
          
      if (checked !== $el.prop(ch)) {
        $el.trigger('change'); 
      }
    }  
     
  }


 /* RADIO PLUGIN DEFINITION
  * ======================== */

  var old = $.fn.radio

  $.fn.radio = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('radio')
        , options = $.extend({}, $.fn.radio.defaults, $this.data(), typeof option == 'object' && option);
      if (!data) $this.data('radio', (data = new Radio(this, options)));
      if (option == 'toggle') data.toggle()
      if (option == 'check' || option == 'uncheck') data.setCheck(option)
      else if (option) data.setState(); 
    });
  }
  
  $.fn.radio.defaults = {
    template: '<span class="icons"><span class="first-icon fa fa-circle-o"></span><span class="second-icon fa fa-dot-circle-o"></span></span>'
  }


 /* RADIO NO CONFLICT
  * ================== */

  $.fn.radio.noConflict = function () {
    $.fn.radio = old;
    return this;
  }


 /* RADIO DATA-API
  * =============== */

  $(document).on('click.radio.data-api', '[data-toggle^=radio], .radio', function (e) {
    var $radio = $(e.target);
    e && e.preventDefault() && e.stopPropagation();
    if (!$radio.hasClass('radio')) $radio = $radio.closest('.radio');
    $radio.find(':radio').radio('toggle');
  });
  
  $(function () {
    $('[data-toggle="radio"]').each(function () {
      var $radio = $(this);
      $radio.radio();
    });
  });

}(window.jQuery);
//# sourceMappingURL=data:application/json;base64,